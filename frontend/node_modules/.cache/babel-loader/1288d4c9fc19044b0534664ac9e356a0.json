{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withOneTabEnforcer = withOneTabEnforcer;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DefaultOnlyOneTabComponent = function DefaultOnlyOneTabComponent() {\n  return _react.default.createElement(\"div\", null, \"Sorry! You can only have this application opened in one tab\");\n}; // eslint-disable-next-line import/prefer-default-export\n\n\nfunction withOneTabEnforcer() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$OnlyOneTabCompon = _ref.OnlyOneTabComponent,\n      OnlyOneTabComponent = _ref$OnlyOneTabCompon === void 0 ? DefaultOnlyOneTabComponent : _ref$OnlyOneTabCompon,\n      _ref$localStorageTime = _ref.localStorageTimeout,\n      localStorageTimeout = _ref$localStorageTime === void 0 ? 15 * 1000 : _ref$localStorageTime,\n      _ref$localStorageRese = _ref.localStorageResetInterval,\n      localStorageResetInterval = _ref$localStorageRese === void 0 ? 10 * 1000 : _ref$localStorageRese,\n      _ref$appName = _ref.appName,\n      appName = _ref$appName === void 0 ? \"default-app-name\" : _ref$appName;\n\n  return function (WrappedComponent) {\n    // ...and returns another component...\n    return function (props) {\n      if (isDuplicatedWindow(localStorageTimeout, localStorageResetInterval, appName)) {\n        return _react.default.createElement(OnlyOneTabComponent, null);\n      } else {\n        return _react.default.createElement(WrappedComponent, props);\n      }\n    };\n  };\n}\n\nvar isDuplicatedWindow = function isDuplicatedWindow(localStorageTimeout, localStorageResetInterval, localStorageTabKey) {\n  var ItemType = {\n    Session: 1,\n    Local: 2\n  };\n\n  function setCookie(name, value, days) {\n    var expires = \"\";\n\n    if (days) {\n      var date = new Date();\n      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n      expires = \"; expires=\" + date.toUTCString();\n    }\n\n    document.cookie = name + \"=\" + (value || \"\") + expires + \"; path=/\";\n  }\n\n  function getCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(\";\");\n\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n\n      while (c.charAt(0) == \" \") {\n        c = c.substring(1, c.length);\n      }\n\n      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\n    }\n\n    return null;\n  }\n\n  function GetItem(itemtype) {\n    var val = \"\";\n\n    switch (itemtype) {\n      case ItemType.Session:\n        val = window.name;\n        break;\n\n      case ItemType.Local:\n        val = decodeURIComponent(getCookie(localStorageTabKey));\n        if (val == undefined) val = \"\";\n        break;\n    }\n\n    return val;\n  }\n\n  function SetItem(itemtype, val) {\n    switch (itemtype) {\n      case ItemType.Session:\n        window.name = val;\n        break;\n\n      case ItemType.Local:\n        setCookie(localStorageTabKey, val);\n        break;\n    }\n  }\n\n  function createGUID() {\n    var s4 = function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    };\n\n    return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4() + s4();\n  }\n  /**\n   * Compare our tab identifier associated with this session (particular tab)\n   * with that of one that is in window name Storage (the active one for this browser).\n   * This browser tab is good if any of the following are true:\n   * 1.  There is no cookie Storage Guid yet (first browser tab).\n   * 2.  The window name Storage Guid matches the cookie Guid.  Same tab, refreshed.\n   * 3.  The window name Storage timeout period has ended.\n   *\n   * If our current session is the correct active one, an interval will continue\n   * to re-insert the window name Storage value with an updated timestamp.\n   *\n   * Another thing, that should be done (so you can open a tab within 15 seconds of closing it) would be to do the following (or hook onto an existing onunload method):\n   */\n\n\n  function isTabDuplicated() {\n    //console.log(\"In testTab\");\n    var sessionGuid = GetItem(ItemType.Session) || createGUID();\n    SetItem(ItemType.Session, sessionGuid);\n    var val = GetItem(ItemType.Local);\n    var tabObj = (val == \"\" ? null : JSON.parse(val)) || null; // If no or stale tab object, our session is the winner.  If the guid matches, ours is still the winner\n\n    if (tabObj === null || tabObj.timestamp < new Date().getTime() - localStorageTimeout || tabObj.guid === sessionGuid) {\n      var setTabObj = function setTabObj() {\n        //console.log(\"In setTabObj\");\n        var newTabObj = {\n          guid: sessionGuid,\n          timestamp: new Date().getTime()\n        };\n        SetItem(ItemType.Local, JSON.stringify(newTabObj));\n      };\n\n      setTabObj();\n      setInterval(setTabObj, localStorageResetInterval); //every x interval refresh timestamp in cookie\n\n      window.onunload = function () {\n        SetItem(ItemType.Local, \"\");\n        localStorage.removeItem(localStorageTabKey);\n      };\n\n      return false;\n    } else {\n      // An active tab is already open that does not match our session guid.\n      return true;\n    }\n  }\n\n  return isTabDuplicated();\n};","map":{"version":3,"sources":["../src/index.js"],"names":["DefaultOnlyOneTabComponent","OnlyOneTabComponent","localStorageTimeout","localStorageResetInterval","appName","isDuplicatedWindow","ItemType","Session","Local","expires","date","days","document","name","value","nameEQ","ca","i","c","val","window","decodeURIComponent","getCookie","setCookie","s4","Math","sessionGuid","GetItem","createGUID","SetItem","tabObj","JSON","setTabObj","newTabObj","guid","timestamp","setInterval","localStorage","isTabDuplicated"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nconst DefaultOnlyOneTabComponent = () => (\n  <div>Sorry! You can only have this application opened in one tab</div>\n);\n\n// eslint-disable-next-line import/prefer-default-export\nexport function withOneTabEnforcer({\n  OnlyOneTabComponent = DefaultOnlyOneTabComponent,\n  localStorageTimeout = 15 * 1000, // 15,000 milliseconds = 15 seconds.\n  localStorageResetInterval = 10 * 1000, // 10,000 milliseconds = 10 seconds.\n  appName = \"default-app-name\" // has to be unique!\n} = {}) {\n  return WrappedComponent => {\n    // ...and returns another component...\n    return props => {\n      if (\n        isDuplicatedWindow(\n          localStorageTimeout,\n          localStorageResetInterval,\n          appName\n        )\n      ) {\n        return <OnlyOneTabComponent />;\n      } else {\n        return <WrappedComponent {...props} />;\n      }\n    };\n  };\n}\n\nconst isDuplicatedWindow = function(\n  localStorageTimeout,\n  localStorageResetInterval,\n  localStorageTabKey\n) {\n  var ItemType = {\n    Session: 1,\n    Local: 2\n  };\n\n  function setCookie(name, value, days) {\n    var expires = \"\";\n    if (days) {\n      var date = new Date();\n      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n      expires = \"; expires=\" + date.toUTCString();\n    }\n    document.cookie = name + \"=\" + (value || \"\") + expires + \"; path=/\";\n  }\n\n  function getCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(\";\");\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) == \" \") c = c.substring(1, c.length);\n      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\n    }\n    return null;\n  }\n\n  function GetItem(itemtype) {\n    var val = \"\";\n    switch (itemtype) {\n      case ItemType.Session:\n        val = window.name;\n        break;\n      case ItemType.Local:\n        val = decodeURIComponent(getCookie(localStorageTabKey));\n        if (val == undefined) val = \"\";\n        break;\n    }\n    return val;\n  }\n\n  function SetItem(itemtype, val) {\n    switch (itemtype) {\n      case ItemType.Session:\n        window.name = val;\n        break;\n      case ItemType.Local:\n        setCookie(localStorageTabKey, val);\n        break;\n    }\n  }\n\n  function createGUID() {\n    const s4 = function() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    };\n    return (\n      s4() +\n      s4() +\n      \"-\" +\n      s4() +\n      \"-\" +\n      s4() +\n      \"-\" +\n      s4() +\n      \"-\" +\n      s4() +\n      s4() +\n      s4()\n    );\n  }\n\n  /**\n   * Compare our tab identifier associated with this session (particular tab)\n   * with that of one that is in window name Storage (the active one for this browser).\n   * This browser tab is good if any of the following are true:\n   * 1.  There is no cookie Storage Guid yet (first browser tab).\n   * 2.  The window name Storage Guid matches the cookie Guid.  Same tab, refreshed.\n   * 3.  The window name Storage timeout period has ended.\n   *\n   * If our current session is the correct active one, an interval will continue\n   * to re-insert the window name Storage value with an updated timestamp.\n   *\n   * Another thing, that should be done (so you can open a tab within 15 seconds of closing it) would be to do the following (or hook onto an existing onunload method):\n   */\n  function isTabDuplicated() {\n    //console.log(\"In testTab\");\n    var sessionGuid = GetItem(ItemType.Session) || createGUID();\n    SetItem(ItemType.Session, sessionGuid);\n\n    var val = GetItem(ItemType.Local);\n    var tabObj = (val == \"\" ? null : JSON.parse(val)) || null;\n\n    // If no or stale tab object, our session is the winner.  If the guid matches, ours is still the winner\n    if (\n      tabObj === null ||\n      tabObj.timestamp < new Date().getTime() - localStorageTimeout ||\n      tabObj.guid === sessionGuid\n    ) {\n      const setTabObj = () => {\n        //console.log(\"In setTabObj\");\n        var newTabObj = {\n          guid: sessionGuid,\n          timestamp: new Date().getTime()\n        };\n        SetItem(ItemType.Local, JSON.stringify(newTabObj));\n      };\n\n      setTabObj();\n      setInterval(setTabObj, localStorageResetInterval); //every x interval refresh timestamp in cookie\n      window.onunload = () => {\n        SetItem(ItemType.Local, \"\");\n        localStorage.removeItem(localStorageTabKey);\n      };\n      return false;\n    } else {\n      // An active tab is already open that does not match our session guid.\n      return true;\n    }\n  }\n  return isTabDuplicated();\n};\n"]},"metadata":{},"sourceType":"script"}