{"ast":null,"code":"import{createStore,combineReducers,applyMiddleware}from'redux';import thunk from'redux-thunk';import{composeWithDevTools}from'redux-devtools-extension';import{userLoginReducer,checkAlreadyLoggedInReducer,getUserDataReducer}from'./redux/reducers/user';var reducer=combineReducers({userLogin:userLoginReducer,checkLogin:checkAlreadyLoggedInReducer,getUserDetails:getUserDataReducer});var userInfoFromStorage=sessionStorage.getItem('userInfo')?JSON.parse(sessionStorage.getItem('userInfo')):null;var initialState={userLogin:{userInfo:userInfoFromStorage}};var middleware=[thunk];var store=createStore(reducer,initialState,composeWithDevTools(applyMiddleware.apply(void 0,middleware)));export default store;","map":{"version":3,"sources":["/media/pratham/Pratham/TrestleLabs/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","userLoginReducer","checkAlreadyLoggedInReducer","getUserDataReducer","reducer","userLogin","checkLogin","getUserDetails","userInfoFromStorage","sessionStorage","getItem","JSON","parse","initialState","userInfo","middleware","store"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,CAAuCC,eAAvC,KAA8D,OAA9D,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,OAASC,mBAAT,KAAoC,0BAApC,CACA,OACEC,gBADF,CAEEC,2BAFF,CAGEC,kBAHF,KAIO,uBAJP,CAMA,GAAMC,CAAAA,OAAO,CAAGP,eAAe,CAAC,CAC9BQ,SAAS,CAAEJ,gBADmB,CAE9BK,UAAU,CAAEJ,2BAFkB,CAG9BK,cAAc,CAAEJ,kBAHc,CAAD,CAA/B,CAMA,GAAMK,CAAAA,mBAAmB,CAAGC,cAAc,CAACC,OAAf,CAAuB,UAAvB,EACxBC,IAAI,CAACC,KAAL,CAAWH,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAX,CADwB,CAExB,IAFJ,CAIA,GAAMG,CAAAA,YAAY,CAAG,CACnBR,SAAS,CAAE,CAAES,QAAQ,CAAEN,mBAAZ,CADQ,CAArB,CAIA,GAAMO,CAAAA,UAAU,CAAG,CAAChB,KAAD,CAAnB,CAEA,GAAMiB,CAAAA,KAAK,CAAGpB,WAAW,CACvBQ,OADuB,CAEvBS,YAFuB,CAGvBb,mBAAmB,CAACF,eAAe,MAAf,QAAmBiB,UAAnB,CAAD,CAHI,CAAzB,CAMA,cAAeC,CAAAA,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {\n  userLoginReducer,\n  checkAlreadyLoggedInReducer,\n  getUserDataReducer,\n} from './redux/reducers/user';\n\nconst reducer = combineReducers({\n  userLogin: userLoginReducer,\n  checkLogin: checkAlreadyLoggedInReducer,\n  getUserDetails: getUserDataReducer,\n});\n\nconst userInfoFromStorage = sessionStorage.getItem('userInfo')\n  ? JSON.parse(sessionStorage.getItem('userInfo'))\n  : null;\n\nconst initialState = {\n  userLogin: { userInfo: userInfoFromStorage },\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  reducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}