{"ast":null,"code":"var _jsxFileName = \"/media/pratham/Pratham/TrestleLabs/frontend/src/screens/LoginScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport GoogleLogin from 'react-google-login';\nimport { login, logout } from '../redux/actions/user';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginScreen = ({\n  location,\n  history\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/');\n    } else {\n      if (userInfo.isLoggedIn) {\n        const Y = window.confirm('already login continue in this tab ?');\n\n        if (Y) {\n          history.push('/dashboard');\n        } else {\n          dispatch(logout(userInfo.email));\n          history.push('/');\n        }\n      }\n    }\n  }, [history, userInfo]);\n\n  const handleSuccessLogin = async response => {\n    const {\n      name,\n      email,\n      imageUrl\n    } = response.profileObj;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('http://localhost:5000/user/getuser', {\n      email,\n      config\n    });\n\n    if (data.isLoggedIn) {\n      const Y = window.confirm('already login continue in this tab ?');\n\n      if (Y) {\n        console.log('data');\n        console.log(data);\n        debugger;\n        dispatch(login(data.name, data.email, data.imageUrl));\n        history.push('/dashboard');\n      } else {\n        history.push('/');\n      }\n    } else {\n      dispatch(login(name, email, imageUrl));\n    }\n  };\n\n  const handleFailLogin = response => {\n    console.log(response);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"text-center my-5 py-5 \",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"text-center my-5 py-5 shadow bg-light\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-success\",\n        children: \"Sign in Here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        className: \"mt-2 text-center\",\n        clientId: \"329337993518-7u332kcuq9agn3h1nec249froda0bqp3.apps.googleusercontent.com\",\n        buttonText: \"Log in with Google\",\n        onSuccess: handleSuccessLogin,\n        onFailure: handleFailLogin,\n        cookiePolicy: 'single_host_origin',\n        theme: \"dark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginScreen, \"Q9DmGMsbbWsXfUatN82A2avI6C0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = LoginScreen;\nexport default LoginScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginScreen\");","map":{"version":3,"sources":["/media/pratham/Pratham/TrestleLabs/frontend/src/screens/LoginScreen.jsx"],"names":["React","useEffect","Container","GoogleLogin","login","logout","useDispatch","useSelector","axios","LoginScreen","location","history","dispatch","userLogin","state","userInfo","push","isLoggedIn","Y","window","confirm","email","handleSuccessLogin","response","name","imageUrl","profileObj","config","headers","data","post","console","log","handleFailLogin"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport GoogleLogin from 'react-google-login';\nimport { login, logout } from '../redux/actions/user';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\n\nconst LoginScreen = ({ location, history }) => {\n  const dispatch = useDispatch();\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/');\n    } else {\n      if (userInfo.isLoggedIn) {\n        const Y = window.confirm('already login continue in this tab ?');\n        if (Y) {\n          history.push('/dashboard');\n        } else {\n          dispatch(logout(userInfo.email));\n          history.push('/');\n        }\n      }\n    }\n  }, [history, userInfo]);\n\n  const handleSuccessLogin = async (response) => {\n    const { name, email, imageUrl } = response.profileObj;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const { data } = await axios.post('http://localhost:5000/user/getuser', {\n      email,\n      config,\n    });\n\n    if (data.isLoggedIn) {\n      const Y = window.confirm('already login continue in this tab ?');\n      if (Y) {\n        console.log('data');\n        console.log(data);\n\n        debugger;\n        dispatch(login(data.name, data.email, data.imageUrl));\n        history.push('/dashboard');\n      } else {\n        history.push('/');\n      }\n    } else {\n      dispatch(login(name, email, imageUrl));\n    }\n  };\n\n  const handleFailLogin = (response) => {\n    console.log(response);\n  };\n\n  return (\n    <Container className=\"text-center my-5 py-5 \">\n      <Container className=\"text-center my-5 py-5 shadow bg-light\">\n        <h1 className=\"text-success\">Sign in Here</h1>\n\n        <GoogleLogin\n          className=\"mt-2 text-center\"\n          clientId=\"329337993518-7u332kcuq9agn3h1nec249froda0bqp3.apps.googleusercontent.com\"\n          buttonText=\"Log in with Google\"\n          onSuccess={handleSuccessLogin}\n          onFailure={handleFailLogin}\n          cookiePolicy={'single_host_origin'}\n          theme=\"dark\"\n        />\n      </Container>\n    </Container>\n  );\n};\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}