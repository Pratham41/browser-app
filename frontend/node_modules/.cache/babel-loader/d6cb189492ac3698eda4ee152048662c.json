{"ast":null,"code":"var _jsxFileName = \"/media/pratham/Pratham/TrestleLabs/frontend/src/screens/LoginScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport GoogleLogin from 'react-google-login';\nimport { login, isAlreadyLoggedIn, logout } from '../redux/actions/user';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LoginScreen = ({\n  location,\n  history\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n\n  async function logListener(info) {\n    try {\n      let tabInfo = await browser.tabs.get(info.tabId);\n      console.log(tabInfo);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  browser.tabs.onActivated.addListener(logListener);\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    loading,\n    error,\n    userInfo\n  } = userLogin;\n  const checkLogin = useSelector(state => state.checkLogin);\n  const {\n    userLoggedIn\n  } = checkLogin; // const redirect = location.search ? location.search.split('=')[1] : '/';\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/');\n    } else {\n      if (userInfo.isLoggedIn) {\n        const Y = window.confirm('already login continue in this tab ?');\n\n        if (Y) {\n          history.push('/dashboard');\n        } else {\n          dispatch(logout(userInfo.email));\n          history.push('/');\n        }\n      }\n    }\n  }, [history, userInfo]);\n\n  const handleSuccessLogin = response => {\n    const {\n      name,\n      email,\n      imageUrl\n    } = response.profileObj;\n    dispatch(isAlreadyLoggedIn(email));\n    dispatch(login(name, email, imageUrl));\n  };\n\n  const handleFailLogin = response => {\n    console.log(response);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"text-center my-5 py-5 shadow bg-light\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-success\",\n        children: \"Sign in Here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        className: \"mt-2 text-center\",\n        clientId: \"329337993518-7u332kcuq9agn3h1nec249froda0bqp3.apps.googleusercontent.com\",\n        buttonText: \"Log in with Google\",\n        onSuccess: handleSuccessLogin,\n        onFailure: handleFailLogin,\n        cookiePolicy: 'single_host_origin',\n        theme: \"dark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(LoginScreen, \"nVLoIDDjuxBmqWebhfU04n+hv68=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = LoginScreen;\nexport default LoginScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginScreen\");","map":{"version":3,"sources":["/media/pratham/Pratham/TrestleLabs/frontend/src/screens/LoginScreen.jsx"],"names":["React","useState","useEffect","Container","GoogleLogin","login","isAlreadyLoggedIn","logout","useDispatch","useSelector","LoginScreen","location","history","dispatch","logListener","info","tabInfo","browser","tabs","get","tabId","console","log","error","onActivated","addListener","userLogin","state","loading","userInfo","checkLogin","userLoggedIn","push","isLoggedIn","Y","window","confirm","email","handleSuccessLogin","response","name","imageUrl","profileObj","handleFailLogin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport GoogleLogin from 'react-google-login';\nimport { login, isAlreadyLoggedIn, logout } from '../redux/actions/user';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst LoginScreen = ({ location, history }) => {\n  const dispatch = useDispatch();\n\n  async function logListener(info) {\n    try {\n      let tabInfo = await browser.tabs.get(info.tabId);\n      console.log(tabInfo);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  browser.tabs.onActivated.addListener(logListener);\n  const userLogin = useSelector((state) => state.userLogin);\n  const { loading, error, userInfo } = userLogin;\n\n  const checkLogin = useSelector((state) => state.checkLogin);\n  const { userLoggedIn } = checkLogin;\n\n  // const redirect = location.search ? location.search.split('=')[1] : '/';\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/');\n    } else {\n      if (userInfo.isLoggedIn) {\n        const Y = window.confirm('already login continue in this tab ?');\n        if (Y) {\n          history.push('/dashboard');\n        } else {\n          dispatch(logout(userInfo.email));\n          history.push('/');\n        }\n      }\n    }\n  }, [history, userInfo]);\n\n  const handleSuccessLogin = (response) => {\n    const { name, email, imageUrl } = response.profileObj;\n    dispatch(isAlreadyLoggedIn(email));\n    dispatch(login(name, email, imageUrl));\n  };\n\n  const handleFailLogin = (response) => {\n    console.log(response);\n  };\n\n  return (\n    <>\n      <Container className=\"text-center my-5 py-5 shadow bg-light\">\n        <h1 className=\"text-success\">Sign in Here</h1>\n\n        <GoogleLogin\n          className=\"mt-2 text-center\"\n          clientId=\"329337993518-7u332kcuq9agn3h1nec249froda0bqp3.apps.googleusercontent.com\"\n          buttonText=\"Log in with Google\"\n          onSuccess={handleSuccessLogin}\n          onFailure={handleFailLogin}\n          cookiePolicy={'single_host_origin'}\n          theme=\"dark\"\n        />\n      </Container>\n    </>\n  );\n};\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}