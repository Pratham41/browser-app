{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, CHECK_LOGGED_IN_REQUEST, CHECK_LOGGED_IN_SUCCESS, CHECK_LOGGED_IN_FAIL, USER_DATA_FAIL, USER_DATA_SUCCESS, USER_DATA_REQUEST } from '../constants/user';\nexport const login = (name, email, imageUrl) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('http://localhost:5000/user/login', {\n      name,\n      email,\n      imageUrl\n    }, config);\n    console.log('debugger');\n    debugger;\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    sessionStorage.setItem('userInfo', JSON.stringify(data)); // sessionStorage.setItem('webcount', JSON.stringify(webcount + 1));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = email => async dispatch => {\n  console.log('logout action');\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const {\n    data\n  } = await axios.post('http://localhost:5000/user/check', {\n    email\n  }, config);\n  sessionStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const isAlreadyLoggedIn = email => async dispatch => {\n  try {\n    dispatch({\n      type: CHECK_LOGGED_IN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('http://localhost:5000/user/check', {\n      email,\n      config\n    });\n    dispatch({\n      type: CHECK_LOGGED_IN_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CHECK_LOGGED_IN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserData = email => async dispatch => {\n  try {\n    dispatch({\n      type: USER_DATA_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('http://localhost:5000/user/getuser', {\n      email,\n      config\n    });\n    dispatch({\n      type: USER_DATA_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DATA_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/media/pratham/Pratham/TrestleLabs/frontend/src/redux/actions/user.js"],"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","CHECK_LOGGED_IN_REQUEST","CHECK_LOGGED_IN_SUCCESS","CHECK_LOGGED_IN_FAIL","USER_DATA_FAIL","USER_DATA_SUCCESS","USER_DATA_REQUEST","login","name","email","imageUrl","dispatch","type","config","headers","data","post","console","log","payload","sessionStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","isAlreadyLoggedIn","getUserData"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGOUT,\n  CHECK_LOGGED_IN_REQUEST,\n  CHECK_LOGGED_IN_SUCCESS,\n  CHECK_LOGGED_IN_FAIL,\n  USER_DATA_FAIL,\n  USER_DATA_SUCCESS,\n  USER_DATA_REQUEST,\n} from '../constants/user';\n\nexport const login = (name, email, imageUrl) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const { data } = await axios.post(\n      'http://localhost:5000/user/login',\n      { name, email, imageUrl },\n      config\n    );\n    console.log('debugger');\n    debugger;\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    sessionStorage.setItem('userInfo', JSON.stringify(data));\n\n    // sessionStorage.setItem('webcount', JSON.stringify(webcount + 1));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const logout = (email) => async (dispatch) => {\n  console.log('logout action');\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  const { data } = await axios.post(\n    'http://localhost:5000/user/check',\n    { email },\n    config\n  );\n  sessionStorage.removeItem('userInfo');\n  dispatch({ type: USER_LOGOUT });\n};\n\nexport const isAlreadyLoggedIn = (email) => async (dispatch) => {\n  try {\n    dispatch({\n      type: CHECK_LOGGED_IN_REQUEST,\n    });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const { data } = await axios.post('http://localhost:5000/user/check', {\n      email,\n      config,\n    });\n\n    dispatch({\n      type: CHECK_LOGGED_IN_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: CHECK_LOGGED_IN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const getUserData = (email) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_DATA_REQUEST,\n    });\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const { data } = await axios.post('http://localhost:5000/user/getuser', {\n      email,\n      config,\n    });\n\n    dispatch({\n      type: USER_DATA_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DATA_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}